The ABI.

*  Register usage in compiled code.

RAX, RCX, RDX, RSI, and RDI are all caller-save and only store immediate or
raw values. These registers were chosen because they're all used as implicit
operands in a number of x86 instructions. They are never scanned by the GC.
Exception: CMPXCHG and CMPXCHG16B use these registers to hold values, so must
be executed with :EXTRA-REGISTERS metadata to indicate liveness.

RSP is the stack pointer.
RBP is the frame pointer, it is callee-save.

RBX, R8, R9, R10, R11, R12, and R13 are all caller-save and are used to store
Lisp values. The GC will scan these registers.

R14 and R15 are not used or scanned by the GC due to historical reasons.

The direction flag (DF) in RFlags must be set to zero (forward) on function
entry and return. Other flags are caller-save.

FS_BASE always points to the current CPU's structure.
GS_BASE always points to the current thread.

x87/MMX/SSE state is caller-save and the x87/MMX state is not defined across
calls. The callee must execute EMMS before it uses x87 instructions.
AVX is not supported.
The FPU state is not implicitly preserved when an interrupt handler is called.


*  Common calling convention.

The number of arguments is passed in RCX as a fixnum.
The first 5 arguments are passed in R8, R9, R10, R11, R12.
Remaining arguments are passed on the stack immediately above the return
address. The callee is free to modify arguments on the stack, and the caller
must remove them from the stack when the caller returns.

The stack pointer must have bit 3 set and bits 2-0 clear on entry to a function.
In other words, it must be offset 8 bytes from a 16-byte boundary.

Stack pointer| Value
-------------+-----------
xx8+(N-4)*8  | Argument N
xx8+8        | Argument 5
xx8+0        | Return address


**  Calling convention for funcallable objects.

Funcallable objects are normal compiled functions, closures and
funcallable-instances.
The object is loaded into RBX, then the entry point is called.

(call (:object :rbx +function-entry-point+))


**  Calling convention for function references.

Function references (frefs) are used to provide a uniform representation of
function names that can be called efficiently.
They can be called directly using the :NAMED-CALL assembly syntax.

(call (:named-call <function-name>))

<function-name> will be resolved to an fref by the assembler, similar
to :FUNCTION syntax.


***  Function references and undefined functions.

The first word if a function reference always points to the entry point
of the undefined function trampoline. When a function is not defined, the
fref is configured for closure mode and has its function pointed at itself.
Calling an fref that is configured this way will call the undefined function
trampoline with the fref as the closure argument. It then tail-calls to
SYS.INT::RAISE-UNDEFINED-FUNCTION, with the fref as the closure argument
and with the original arguments intact.


***  Function references and closures.

When a function reference's function is set to a closure, fref is configured
so that it loads the associated function into RBX and then performs an
indirect call to the entry point of the function.


**  Funcallable-instances.

The entry point of a funcallable instance always points to the funcallable-
instance trampoline. This trampoline loads the appropriate function from
the funcallable instance and tails calls to it with the original arguments.
They are treated like closures by function references.


*  Return convention.

The number of returned values is passed in RCX.
When returning zero values, R8 is loaded with NIL so that the caller does not
need to test for 0 values when it expects a single return value.
The first 5 return values are passed in R8, R9, R10, R11, R12.
Remaining return values are passed in the multiple value save area in the
thread object.

(:object nil (+ #.+thread-mv-slots-start+ (- N 5))), with the (gs) prefix.

Note: Interrupt handlers borrow the current thread's context, and must take
care not to step on the multiple value save area. Returning 5 or fewer values
is safe.


**  Tail calls.

Tail calls can only be performed when 5 or fewer arguments are being passed
to the function because the caller must remove arguments from the stack
after a call. Arguments passed in registers require no cleanup.


*  Non-local exits.

BLOCK and TAGBODY create NLX information objects on the stack. These do not
follow the normal object representation and are known by their address. They
are aligned to 16 bytes, which allows the address to be treated like a fixnum
even though it is a raw, unboxed value.

+0  Target address table.
    This points to a position-independent jump table.
    There is one entry in the jump table per NLX go-tag or exactly one
    for a BLOCK. Each entry points to a thunk that restores RSP/RBP while
    maintaining correct GC metadata.
+8  Saved special stack pointer.
    This is saved with address mark bit clear to simplify the implementation
    of GET-BLOCK/TAGBODY-INFO-BINDING-STACK-POINTER if it is non-NIL. This slot
    is never scanned by the GC, but the special stack will always live at least
    as long as the NLX info, as the objects that represent the special stack are
    also allocated with dynamic-extent.
+16 Saved stack pointer.
+24 Saved frame pointer.

1) If the NLX was caused by a RETURN-FROM, then the result form is evaulated
   and any return values are saved on the stack as if by MULTIPLE-VALUE-PROG1.
2) SYS.INT::%%UNWIND-TO is called to unwind the special stack to the saved
   position. If an unwind-protect cleanup function triggers another non-local
   exit, then %%UNWIND-TO will never return and this non-local exit will be
   overridden.
3) The NLX information object is loaded into RAX.
4) If the NLX was caused by a RETURN-FROM, then the saved values are reloaded
   using the multiple-value return convention.
5) The NLX thunk is jumped to.
6) The NLX thunk restores RSP and RBP, then jumps to the true target of the
   NLX.

The NLX thunk exists in the function containing BLOCK/TAGBODY, not the function
performing the NLX because the function performing the NLX does not have the
correct GC metadata available during compilation.

Mezzano currently implements EXIT-EXTENT:MEDIUM, but this may change.

BLOCK/RETURN-FROM may use a more optimized value passing convention depending
on the number of values expected at the block exit.


**  CATCH and THROW.

CATCH and THROW are implemented using BLOCK and RETURN-FROM, similar to
conditions and restarts.


*  The special stack.

"Stack" is slightly misleading, the special stack is a linked-list of
dynamic-extent 3-element SIMPLE-VECTORs. Element 0 of each vector is the
previous vector in the list, or NIL to terminate the list. Element 1 is the
primary object and the type determines what kind of stack entry this is.
Element 2 contains additional data.
3-element SIMPLE-VECTORs were chosen over CONS-based lists because while they
are equally compact, vectors involve less pointer-chasing.

 Type         | Meaning
--------------+--------------------
SYMBOL        | This is value cell for a dynamic binding. Element 2 is the
              | current value of the symbol.
SIMPLE-VECTOR | This is an environment vector containing an NLX information
              | object. Element 2 is the offset of the NLX info.
FUNCTION      | This is an unwind-protect cleanup pseudo-closure. Element 2
              | is the environment vector associated with the closure.


** Dynamic bindings.

Dynamic bindings is implemented using deep binding. Each binding has an
associated value cell. A value cell is a 3 element SIMPLE-VECTOR containing
a link to the previous special stack entry, the associated symbol, and the
binding's value. Symbols have a global value cell that contains the symbol's
global value, this is used when there are no value cells for that symbol on
the stack. To determine the active value cell for a symbol, the special stack
is searched upwards and the most recent value cell for that symbol found is
the the active value cell. If there are no value cells on the stack or if
the symbol has been declared global, then the symbol's global value cell is
used. Value cell lookup is implemented by SYMBOL-VALUE-CELL.
A cache from symbols to value cells is maintained to optimize value lookup.
The cache is a 128 element array embedded in the thread object, indexed
by (LDB (BYTE 7 4) (LISP-OBJECT-ADDRESS symbol)). Cache entries are updated
on binding/unbinding to ensure that the cache is always up to day.


** BLOCK/TAGBODY NLX information.

NLX information objects treated as closed over variables, closed over variables
are stored in environment vectors, represented using SIMPLE-VECTORs.
Before a GO or RETURN-FOM occurs, the entry in the environment vector
containing the NLX information address is compared against NIL. If it is NIL
then the dynamic-extent of the BLOCK or TAGBODY has finished and it is no
longer valid to perform the NLX. SYS.INT::RAISE-BAD-BLOCK or
SYS.INT::RAISE-BAD-GO-TAG will be called instead.
When the dynamic-extent of the BLOCK or TAGBODY associated with the NLX finishs,
the entry in the environment vector is invalidated by replaced the address of
the NLX with NIL.
This special stack entry is is popped by (SETF (SVREF ELT-1 ELT-2) NIL),
invalidating it and preventing any further NLX.

This does not protect against cross-thread non-local exits, they will break
the system terribly instead.


** Unwind-protect.

UNWIND-PROTECT cleanup forms are enclosed in a zero-argument lambda, which in
turn may close over variables in the enclosing function. This lambda is not
represented using a normal closure object, instead the environment vector and
the associated function object are stored directly in the special stack.

The cleanup function is called by loading the function into one of the value
registers, loading the environment vector into RBX, loading RCX with fixnum 0,
and then calling the function's entry point.


*  GC metadata.

Every instruction in the system has a set of GC related properties associated
with it that mostly define the layout of the stack and registers before that
instruction is executed.

The complete GC information for a function is stored in a packed representation
after the function's constant pool.


** :FRAME/:NO-FRAME

Specifies if an RBP-based stack frame is active.


** :INTERRUPT

A boolean. Currently this does not mean anything.
Must be false.


** :LAYOUT

A bit-vector indicating liveness of a given stack slot.
With a frame:  (bit layout n) = (livep (- :rbp (* (1+ n) 8)))
With no frame: (bit layout n) = (livep (+ :rsp (* n 8)))
Defaults to #*.

When no RBP-based frame is used, this is used to determine the size of the
stack frame, including the return address (if any).


** :INCOMING-ARGUMENTS

This can be NIL, :RCX or [0,14]. It is ignored when NIL.
This is used to specify how many live values there are above the return address.
If it is :RCX, then there are (min (- [value-of-rcx] 5) 0) live values.
If it is an integer, then the integer specifies a stack slot that contains the
total number of arguments, including register arguments. The address of the
slot is calculated using the same method as :LAYOUT.
:RCX is not valid over a function call as :RCX is caller-save.
Defaults to NIL.


** :MULTIPLE-VALUES

This can be NIL or [0,14]. It is ignored when NIL.
When non-NIL, this means that the multiple-value calling convention is active
and that there :RCX + N values live. If there are more than 5 values, then the
GC will scan the thread's multiple value save area as required.

This is ignored unless the function has been interrupted.

### The flexibility here is unnecessary. It only needs to be able to represent
    NIL, RCX+0 or RCX+1.

:RCX, as always, holds a fixnum.
Defaults to NIL.


** :PUSHED-VALUES

An integer, (SIGNED-BYTE 32). There are N additional live values on the stack,
from the current stack pointer value upwards.

Defaults to 0.
This is only valid when :FRAME is active.


** :PUSHED-VALUES-REGISTER

This must be :RCX or NIL. It is ignored when NIL.
The register it specifies contains a fixnum, the number of additional live
values on the stack. This is additive with :PUSHED-VALUES.

Defaults to NIL.
This is only valid when :FRAME is active and the function is not in a call.


** :BLOCK-OR-TAGBODY-THUNK

This must be :RAX or NIL. It is ignored when NIL.
When present, the stack & frame pointer are taken from the NLX information
object in :RAX, and :RSP/:RBP are ignored.

Defaults to NIL.


** :EXTRA-REGISTERS

Specifies that additional registers contain values.
This may be either NIL (no extra registers), :RAX (only :RAX),
:RAX-RCX (:RAX and :RCX), or :RAX-RCX-RDX (:RAX, :RCX and :RDX).

Defaults to NIL.
This is only valid when the function is not in a call.


** :RESTART

Specifies that the function must be restarted when a GC occurs.
The program counter is set to the start of the metadata region.

Defaults to NIL.
This is only valid when the function is not in a call.
